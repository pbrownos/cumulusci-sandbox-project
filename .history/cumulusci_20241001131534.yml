minimum_cumulusci_version: '3.92.0'
project:
    name: cumulusci-sandbox-project
    package:
        name: TestUnlockedPackage  # Correct package name
        api_version: '61.0'
    git:
        default_branch: 'main'
    source_format: sfdx
    custom:
        keychain_class: cumulusci.core.keychain.PlaintextProjectKeychain

tasks:
    robot:
        options:
            suites: robot/cumulusci-sandbox-project/tests
            options:
                outputdir: robot/cumulusci-sandbox-project/results

    robot_testdoc:
        options:
            path: robot/cumulusci-sandbox-project/tests
            output: robot/cumulusci-sandbox-project/doc/cumulusci-sandbox-project_tests.html

    run_tests:
        options:
            required_org_code_coverage_percent: 90

    create_package_version:
        class_path: cumulusci.tasks.command.Command
        options:
            command: sf package version create --package TestUnlockedPackage --installation-key "" --wait 10 --json

    get_package_version:
        class_path: cumulusci.tasks.command.Command
        options:
            command: sf package version list -p TestUnlockedPackage --json > package_version.json

    install_package_version:
        class_path: cumulusci.tasks.command.Command
        options:
            command: |
                VERSION_ID=$(jq -r '.result[0].SubscriberPackageVersionId' package_version.json)
                sf package install --wait 10 --package $VERSION_ID --target-org sandbox


services:
  connected_app:
    description: Connection to the Salesforce connected app for JWT authentication
    class_path: cumulusci.core.config.ConnectedAppOAuthConfig

flows:
  release_sit:
    description: Auto-merge SIT to feature branches
    steps:
      1:
        task: github_automerge_main
        options:
          source_branch: SIT  # Change this to your base branch
          branch_prefix: feature/  # Prefix for your feature branch
          create_pull_reqeust_on_conflict: true

  release_to_sandbox:
    description: Create a new package version and deploy it to a sandbox
    steps:
      1:
        task: create_package_version
      2:
        task: get_package_version
      3:
        task: install_package_version
