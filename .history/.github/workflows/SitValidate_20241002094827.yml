name: CCI Pipeline Validate to SIT

# This section defines the event triggers for the GitHub Action.
# The action runs whenever a pull request (PR) is made to the 'SIT' branch.
on:
  pull_request:
    branches:
      - SIT  # Trigger the action when a PR is opened against the SIT branch

jobs:
  SitValidate:
    name: Validate Deployment to SIT (PR Check)
    runs-on: ubuntu-latest  # The job runs on an Ubuntu Linux environment.
    if: github.event_name == 'pull_request'  # Ensure the job only runs on pull requests.

    steps:
      # Step 1: Check out the code from the PR.
      # This is necessary to access the source code files in the repository.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Salesforce CLI.
      # This installs the Node.js runtime and Salesforce CLI, which is required to interact with Salesforce environments.
      - name: Install Salesforce CLI
        run: |
          curl -sL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt install -y nodejs
          npm install -g @salesforce/cli

      # Step 3: Install CumulusCI.
      # CumulusCI is a tool for Salesforce automation. This installs the tool along with its dependencies.
      - name: Install CumulusCI
        run: |
          pip install cumulusci
          pip install --upgrade pyopenssl

      # Step 4: Create the JWT Key File.
      # JWT (JSON Web Token) is used to authenticate with Salesforce. 
      # This command creates a temporary file to store the key.
      - name: Create JWT Key File
        run: |
          echo "${{ secrets.SF_JWT_KEY_SIT }}" > /tmp/server.key

      # Step 5: Authenticate with the Salesforce Org (SIT).
      # This step authenticates into the SIT Salesforce sandbox using the JWT token, consumer key, and username.
      - name: Authenticate with Salesforce Org (SIT)
        env:
          SF_CONSUMER_KEY_SIT: ${{ secrets.SF_CONSUMER_KEY_SIT }}
          SF_USERNAME_SIT: ${{ secrets.SF_USERNAME_SIT }}
        run: |
          sf org login jwt --client-id "$SF_CONSUMER_KEY_SIT" \
                           --jwt-key-file /tmp/server.key \
                           --username "$SF_USERNAME_SIT" \
                           --instance-url https://test.salesforce.com \
                           --set-default

      # Step 6: Import the SIT org into CumulusCI.
      # After authentication, CumulusCI is used to manage Salesforce orgs.
      # This step imports the Salesforce sandbox (SIT) into CumulusCI for future tasks.
      - name: Import SIT Org into CumulusCI
        run: |
          cci org import brownpau@grinnell.edu.ccitestsit sit
        env:
          SFDX_AUTH_URL: $(sf org display --json | jq -r .result.sfdxAuthUrl)

      # Step 7: Validate the feature branch in the SIT org.
      # This step validates the code against the SIT sandbox by simulating a deployment without making changes.
      # The '-c' flag ensures the deployment is done in 'check-only' mode.
      - name: Validate feature branch in SIT (Check Only)
        run: |
          cci task run dx_push --org sit --command "force:source:deploy -c --sourcepath force-app"
        env:
          CUMULUSCI_KEY: ${{ secrets.CUMULUSCI_KEY }}

      # Step 8: Install Chrome.
      # This installs the Google Chrome browser, which is required for running browser-based tests (e.g., Selenium).
      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -f install -y
          rm google-chrome-stable_current_amd64.deb

      # Step 9: Set up ChromeDriver.
      # ChromeDriver is required to automate interactions with the Chrome browser.
      # This step ensures that the right version of ChromeDriver is installed and available for testing.
      - name: Set up ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      # Step 10: Start Xvfb (X virtual framebuffer).
      # Xvfb simulates a display server for running graphical applications (e.g., Chrome) in a headless environment.
      # This is necessary for running browser-based tests without a physical display.
      - name: Start Xvfb (for running browser tests)
        run: |
          export DISPLAY=:99
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &

      # Step 11: Run Robot Tests with Selenium.
      # This is a placeholder step for running Robot Framework tests using Selenium. 
      # The tests are defined in the `robot/cumulusci-sandbox-project/tests` directory and run against the SIT org.
      # NOTE: This step will fail if no tests are defined.
      - name: Run Robot Tests with Selenium
        run: |
          cci task run robot --org sit --path robot/cumulusci-sandbox-project/tests
